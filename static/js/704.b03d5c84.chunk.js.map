{"version":3,"file":"static/js/704.b03d5c84.chunk.js","mappings":"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","sources":["components/Filter/Filter.jsx","redux/contacts.selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","pages/ContactsBook/ContactsBookPage.jsx"],"sourcesContent":["import './Filter.css';\nimport { setFilter } from '../../redux/phoneBookReducer';\nimport { useDispatch } from 'react-redux';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const selectByValues = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <div className=\"containerFilter\">\n      <label className='labelFilter'>\n        <p className=\"textLabel\">Find contacts by name</p>\n        <input\n          className=\"inputFilter\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={selectByValues}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n","import { createSelector } from \"@reduxjs/toolkit\"; \n\nconst selectContactsStore = state => state.contactsStore;\n\nexport const selectContacts = createSelector(\n    selectContactsStore,\n    contactsStore => contactsStore.items\n);\n\nexport const selectContactIsLoading = createSelector(\n  selectContactsStore,\n  contactsStore => contactsStore.isLoading\n);\n\nexport const selectContactError = createSelector(\n  selectContactsStore,\n  contactsStore => contactsStore.error\n);\n\nexport const selectContactFilter = createSelector(\n  selectContactsStore,\n  contactsStore => contactsStore.filter\n);","import './ContactList.css';\n// import { deleteContact} from '../../redux/phoneBookSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteRequestContact } from '../../redux/phoneBookReducer';\nimport {\n  selectContacts,\n  selectContactIsLoading,\n  selectContactError,\n  selectContactFilter,\n} from '../../redux/contacts.selectors';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectContactFilter);\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectContactIsLoading);\n  const error = useSelector(selectContactError);\n  const selectedContacts = filteredContacts();\n\n  function filteredContacts() {\n    if (filter === '') {\n      return contacts;\n    } else {\n      return contacts.filter(\n        ({ name, number }) =>\n          name.toLowerCase().includes(filter.toLowerCase()) ||\n          number.split('-').join('').includes(filter)\n      );\n    }\n  }\n\n  //ф-ція викликається при натиснення кнопки видалення контакту\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(deleteRequestContact(e.target.name));\n  };\n\n  return (\n    <div className=\"conteinerContactList\">\n      {isLoading && <h3>Loading...</h3>}\n      {error && { error }}\n\n      <ul className=\"contactList\">\n        {selectedContacts &&\n          selectedContacts.map(contact => (\n            <li\n              key={`${contact.name}_${contact.number}`}\n              className=\"contactInfo\"\n            >\n              <p className=\"contactName\">{contact.name}: </p>\n              <p className=\"contactPhone\"> {contact.number}</p>\n              <button\n                className=\"btnContact\"\n                name={contact.id}\n                onClick={handleSubmit}\n              >\n                ❌\n              </button>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactList;\n","import './ContactForm.css';\nimport Notiflix from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addRequestContact } from '../../redux/phoneBookReducer';\nimport { selectContacts } from '../../redux/contacts.selectors';\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleAddContact = event => {\n    event.preventDefault();\n\n    const nameInput = event.currentTarget.elements.name.value;\n    const phoneInput = event.currentTarget.elements.phone.value;\n\n    const isThereSuchUser = contacts.some(\n      ({ name, number }) =>\n        name.toLowerCase() === nameInput.toLowerCase() && number === phoneInput\n    );\n\n    if (isThereSuchUser) {\n      Notiflix.Notify.info('this contact is already in the list!');\n      event.currentTarget.reset();\n      return;\n    }\n\n    const newContact = {\n      name: nameInput,\n      number: phoneInput,\n    };\n   \n    dispatch(addRequestContact(newContact));\n    event.currentTarget.reset();\n  };\n\n  return (\n    <div className=\"conteinerContactForm\">\n      <form className=\"contactForm\" onSubmit={handleAddContact}>\n        <label className=\"labelInput\">\n          <p className=\"textLabel\">Name</p>\n          <input\n            className=\"input\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n\n        <label className=\"labelInput\">\n          <p className=\"textLabel\">Number</p>\n          <input\n            className=\"input\"\n            type=\"tel\"\n            name=\"phone\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n\n        <button className=\"btnAdContact\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ContactForm;\n","import Filter from '../../components/Filter/Filter';\nimport ContactList from '../../components/ContactList/ContactList';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport {useDispatch } from 'react-redux';\nimport { getRequestContacts } from '../../redux/phoneBookReducer';\nimport { useEffect } from 'react';\nimport './ContactsBookPage.css';\n\n\nconst ContactsBookPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getRequestContacts());\n  }, [dispatch]);\n\n  return (\n    <div className=\"containerContacts\">\n      {/* <div className=\"boxTitle\">\n        <h1>My contacts</h1>\n      </div> */}\n      <div className=\"boxForm\">\n        <ContactForm />\n        <Filter />\n      </div>\n      <div className=\"boxContacts\">\n        <ContactList />\n      </div>\n    </div>\n  );\n};\n\nexport default ContactsBookPage;\n"],"names":["dispatch","useDispatch","_jsx","className","children","_jsxs","type","name","pattern","title","required","onChange","e","setFilter","target","value","selectContactsStore","state","contactsStore","selectContacts","createSelector","items","selectContactIsLoading","isLoading","selectContactError","error","selectContactFilter","filter","useSelector","contacts","selectedContacts","_ref","number","toLowerCase","includes","split","join","handleSubmit","preventDefault","deleteRequestContact","map","contact","id","onClick","concat","onSubmit","event","nameInput","currentTarget","elements","phoneInput","phone","some","Notiflix","reset","newContact","addRequestContact","useEffect","getRequestContacts","ContactForm","Filter","ContactList"],"sourceRoot":""}